/*----- PROTECTED REGION ID(Pico11.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Pico11.cpp
//
// description : C++ source for the Pico11 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Pico11 are implemented in this file.
//
// project :     Pico11
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Pico11
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Pico11.h>
#include <Pico11Class.h>
#include <thread>
#include <string>


/*----- PROTECTED REGION END -----*/	//	Pico11.cpp

/**
 *  Pico11 class description:
 *    Pico11
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name     |  Method name
//================================================================
//  State            |  Inherited (no method)
//  Status           |  Inherited (no method)
//  SetDefaults      |  set_defaults
//  StartStreaming   |  start_streaming
//  StopStreaming    |  stop_streaming
//  Update           |  update
//  On               |  on
//  Off              |  off
//  CollectBlock     |  collect_block
//  SetTrigParamA    |  set_trig_param_a
//  SetTrigParamB    |  set_trig_param_b
//  SetTrigParamC    |  set_trig_param_c
//  SetTrigParamD    |  set_trig_param_d
//  CollectBlockEts  |  collect_block_ets
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  chanAstream     |  Tango::DevDouble	Scalar
//  DevChoose       |  Tango::DevDouble	Scalar
//  DevCh           |  Tango::DevString	Scalar
//  TrgCh           |  Tango::DevDouble	Scalar
//  DevChooseStr    |  Tango::DevDouble	Scalar
//  ThresholdUp     |  Tango::DevDouble	Scalar
//  ThresholdLo     |  Tango::DevDouble	Scalar
//  HysteresisUp    |  Tango::DevDouble	Scalar
//  HysteresisLo    |  Tango::DevDouble	Scalar
//  ThresholdMode   |  Tango::DevDouble	Scalar
//  ChanACond       |  Tango::DevDouble	Scalar
//  ChanBCond       |  Tango::DevDouble	Scalar
//  ChanCCond       |  Tango::DevDouble	Scalar
//  ChanDCond       |  Tango::DevDouble	Scalar
//  ChanAuxCond     |  Tango::DevDouble	Scalar
//  ChanPwqCond     |  Tango::DevDouble	Scalar
//  ChanExtCond     |  Tango::DevDouble	Scalar
//  ChanATrigDir    |  Tango::DevDouble	Scalar
//  ChanBTrigDir    |  Tango::DevDouble	Scalar
//  ChanCTrigDir    |  Tango::DevDouble	Scalar
//  ChanDTrigDir    |  Tango::DevDouble	Scalar
//  ChanAuxTrigDir  |  Tango::DevDouble	Scalar
//  ChanExtTrigDir  |  Tango::DevDouble	Scalar
//  TrigDelay       |  Tango::DevDouble	Scalar
//  chanA           |  Tango::DevDouble	Spectrum  ( max = 10000)
//  chanB           |  Tango::DevDouble	Spectrum  ( max = 10000)
//  chanC           |  Tango::DevDouble	Spectrum  ( max = 10000)
//  chanD           |  Tango::DevDouble	Spectrum  ( max = 10000)
//================================================================

namespace Pico11_ns
{
/*----- PROTECTED REGION ID(Pico11::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Pico11::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Pico11::Pico11()
 *	Description : Constructors for a Tango device
 *                implementing the classPico11
 */
//--------------------------------------------------------
Pico11::Pico11(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Pico11::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::constructor_1
}
//--------------------------------------------------------
Pico11::Pico11(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Pico11::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::constructor_2
}
//--------------------------------------------------------
Pico11::Pico11(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Pico11::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Pico11::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Pico11::delete_device()
{
	DEBUG_STREAM << "Pico11::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::delete_device
	delete[] attr_chanAstream_read;
	delete[] attr_DevCh_read;
	delete[] attr_chanA_read;
	delete[] attr_chanB_read;
	delete[] attr_chanC_read;
	delete[] attr_chanD_read;
}

//--------------------------------------------------------
/**
 *	Method      : Pico11::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Pico11::init_device()
{
	DEBUG_STREAM << "Pico11::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::init_device_before
	
	//	No device property to be read from database
	
	attr_chanAstream_read = new Tango::DevDouble[1];
	attr_DevCh_read = new Tango::DevString[1];
	attr_chanA_read = new Tango::DevDouble[10000];
	attr_chanB_read = new Tango::DevDouble[10000];
	attr_chanC_read = new Tango::DevDouble[10000];
	attr_chanD_read = new Tango::DevDouble[10000];
	/*----- PROTECTED REGION ID(Pico11::init_device) ENABLED START -----*/
	
	//	Initialize device
	
	pico = new p6000();
	*attr_chanAstream_read = 0;
	stdstrDev = "";
	for (int ind = 0; ind < pico->Devices.size(); ind++)
	{
		stdstrDev += std::to_string(ind+1);
		stdstrDev += ".";
		stdstrDev += pico->Devices[ind];
		stdstrDev += "	";
		
	}
	attr_DevCh_read = &strDev;
	pico->BusyReadingDataA = FALSE;
	pico->BusyReadingDataB = FALSE;
	pico->BusyReadingDataC = FALSE;
	pico->BusyReadingDataD = FALSE;
	pico->BusyCopyDataA = FALSE;
	pico->BusyCopyDataB = FALSE;
	pico->BusyCopyDataC = FALSE;
	pico->BusyCopyDataD = FALSE;

	/*----- PROTECTED REGION END -----*/	//	Pico11::init_device
}


//--------------------------------------------------------
/**
 *	Method      : Pico11::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Pico11::always_executed_hook()
{
	DEBUG_STREAM << "Pico11::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Pico11::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Pico11::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Pico11::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Pico11::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Pico11::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Pico11::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute chanAstream related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::read_chanAstream(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_chanAstream(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_chanAstream) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_chanAstream_read);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_chanAstream
}
//--------------------------------------------------------
/**
 *	Write attribute DevChoose related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_DevChoose(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_DevChoose(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_DevChoose) ENABLED START -----*/
	if ((int)(w_val - 1) < pico->Devices.size() + 1 | (int)(w_val - 1) > -1)
	{
		pico->pick_device((int)(w_val - 1));
		CurDev = w_val - 1;
		set_status("Default Trigger");
	}
	//*attr_chanAstream_read = (int)(w_val - 1);
	//pico.pick_device((int)(w_val - 1));
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_DevChoose
}
//--------------------------------------------------------
/**
 *	Read attribute DevCh related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::read_DevCh(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_DevCh(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_DevCh) ENABLED START -----*/
	//	Set the attribute value
	strDev = const_cast<char *>(stdstrDev.c_str());
	attr.set_value(attr_DevCh_read);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_DevCh
}
//--------------------------------------------------------
/**
 *	Write attribute TrgCh related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_TrgCh(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_TrgCh(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_TrgCh) ENABLED START -----*/
	if ((int)(w_val) == 0)
	{
		pico->TriggerSetup(0);
		set_status("Default Trigger");
	}
	if ((int)(w_val) == 1)
	{
		pico->TriggerSetup(1);
		set_status("Trigger Set");
	}
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_TrgCh
}
//--------------------------------------------------------
/**
 *	Write attribute DevChooseStr related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_DevChooseStr(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_DevChooseStr(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_DevChooseStr) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_DevChooseStr
}
//--------------------------------------------------------
/**
 *	Write attribute ThresholdUp related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ThresholdUp(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ThresholdUp(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ThresholdUp) ENABLED START -----*/
	threUp = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ThresholdUp
}
//--------------------------------------------------------
/**
 *	Write attribute ThresholdLo related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ThresholdLo(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ThresholdLo(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ThresholdLo) ENABLED START -----*/
	threLo = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ThresholdLo
}
//--------------------------------------------------------
/**
 *	Write attribute HysteresisUp related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_HysteresisUp(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_HysteresisUp(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_HysteresisUp) ENABLED START -----*/
	hystUp = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_HysteresisUp
}
//--------------------------------------------------------
/**
 *	Write attribute HysteresisLo related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_HysteresisLo(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_HysteresisLo(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_HysteresisLo) ENABLED START -----*/
	hystLo = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_HysteresisLo
}
//--------------------------------------------------------
/**
 *	Write attribute ThresholdMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ThresholdMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ThresholdMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ThresholdMode) ENABLED START -----*/
	threMode = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ThresholdMode
}
//--------------------------------------------------------
/**
 *	Write attribute ChanACond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanACond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanACond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanACond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.channelA = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.channelA = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.channelA = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanACond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanBCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanBCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanBCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanBCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.channelB = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.channelB = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.channelB = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanBCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanCCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanCCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanCCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanCCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.channelC = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.channelC = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.channelC = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanCCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanDCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanDCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanDCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanDCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.channelD = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.channelD = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.channelD = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanDCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanAuxCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanAuxCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanAuxCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanAuxCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.aux = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.aux = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.aux = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanAuxCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanPwqCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanPwqCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanPwqCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanPwqCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.pulseWidthQualifier = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.pulseWidthQualifier = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.pulseWidthQualifier = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanPwqCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanExtCond related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanExtCond(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanExtCond(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanExtCond) ENABLED START -----*/
	if (w_val = 0)
		pico->conditions.external = PS6000_CONDITION_DONT_CARE;
	if (w_val = 1)
		pico->conditions.external = PS6000_CONDITION_TRUE;
	if (w_val = 2)
		pico->conditions.external = PS6000_CONDITION_FALSE;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanExtCond
}
//--------------------------------------------------------
/**
 *	Write attribute ChanATrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanATrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanATrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanATrigDir) ENABLED START -----*/
	pico->directions.channelA = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanATrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute ChanBTrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanBTrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanBTrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanBTrigDir) ENABLED START -----*/
	pico->directions.channelB = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanBTrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute ChanCTrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanCTrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanCTrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanCTrigDir) ENABLED START -----*/
	pico->directions.channelC = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanCTrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute ChanDTrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanDTrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanDTrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanDTrigDir) ENABLED START -----*/
	pico->directions.channelD = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanDTrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute ChanAuxTrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanAuxTrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanAuxTrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanAuxTrigDir) ENABLED START -----*/
	pico->directions.aux = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanAuxTrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute ChanExtTrigDir related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_ChanExtTrigDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_ChanExtTrigDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_ChanExtTrigDir) ENABLED START -----*/
	pico->directions.ext = pico->TriggerDirections(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_ChanExtTrigDir
}
//--------------------------------------------------------
/**
 *	Write attribute TrigDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Pico11::write_TrigDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Pico11::write_TrigDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Pico11::write_TrigDelay) ENABLED START -----*/
	pico->TrigDelay = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::write_TrigDelay
}
//--------------------------------------------------------
/**
 *	Read attribute chanA related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void Pico11::read_chanA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_chanA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_chanA) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(chanA.data(), chanA.size());
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_chanA
}
//--------------------------------------------------------
/**
 *	Read attribute chanB related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void Pico11::read_chanB(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_chanB(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_chanB) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(chanB.data(), chanB.size());
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_chanB
}
//--------------------------------------------------------
/**
 *	Read attribute chanC related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void Pico11::read_chanC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_chanC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_chanC) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(chanC.data(), chanC.size());
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_chanC
}
//--------------------------------------------------------
/**
 *	Read attribute chanD related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void Pico11::read_chanD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Pico11::read_chanD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Pico11::read_chanD) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(chanD.data(), chanD.size());
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::read_chanD
}

//--------------------------------------------------------
/**
 *	Method      : Pico11::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Pico11::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Pico11::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command SetDefaults related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::set_defaults()
{
	DEBUG_STREAM << "Pico11::SetDefaults()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::set_defaults) ENABLED START -----*/
	
	//	Add your own code


	/*----- PROTECTED REGION END -----*/	//	Pico11::set_defaults
}
//--------------------------------------------------------
/**
 *	Command StartStreaming related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::start_streaming()
{
	DEBUG_STREAM << "Pico11::StartStreaming()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::start_streaming) ENABLED START -----*/
	
	//	Add your own code
	pico->CollectBlockStr();
	


	/*----- PROTECTED REGION END -----*/	//	Pico11::start_streaming
}
//--------------------------------------------------------
/**
 *	Command StopStreaming related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::stop_streaming()
{
	DEBUG_STREAM << "Pico11::StopStreaming()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::stop_streaming) ENABLED START -----*/
	pico->IsRunningGetValues = FALSE;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::stop_streaming
}
//--------------------------------------------------------
/**
 *	Command Update related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::update()
{
	DEBUG_STREAM << "Pico11::Update()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::update) ENABLED START -----*/
	
	BusyCopyA = pico->BusyCopyDataA;
	BusyCopyB = pico->BusyCopyDataB;
	BusyCopyC = pico->BusyCopyDataC;
	BusyCopyD = pico->BusyCopyDataD;
	*attr_chanAstream_read = pico->chanAT.size();
	//	Add your own code
	if (!BusyCopyA)
	{
		pico->BusyReadingDataA = TRUE;
		chanA.reserve(chanA.size() + pico->chanAT.size());
		chanA.insert(chanA.end(), pico->chanAT.begin(), pico->chanAT.end());
		pico->chanAT.clear();
		if (chanA.size() > 7900)
			chanA.clear();
		pico->BusyReadingDataA = FALSE;
	}
	if (!BusyCopyB)
	{
		pico->BusyReadingDataB = TRUE;
		chanB.reserve(chanB.size() + pico->chanBT.size());
		chanB.insert(chanB.end(), pico->chanBT.begin(), pico->chanBT.end());
		pico->chanBT.clear();
		if (chanB.size() > 7900)
			chanB.clear();
		pico->BusyReadingDataB = FALSE;
	}
	if (!BusyCopyC)
	{
		pico->BusyReadingDataC = TRUE;
		chanC.reserve(chanC.size() + pico->chanCT.size());
		chanC.insert(chanC.end(), pico->chanCT.begin(), pico->chanCT.end());
		pico->chanCT.clear();
		if (chanC.size() > 7900)
			chanC.clear();
		pico->BusyReadingDataC = FALSE;
	}
	if (!BusyCopyD)
	{
		pico->BusyReadingDataD = TRUE;
		chanD.reserve(chanD.size() + pico->chanDT.size());
		chanD.insert(chanD.end(), pico->chanDT.begin(), pico->chanDT.end());
		pico->chanDT.clear();
		if (chanD.size() > 7900)
			chanD.clear();
		pico->BusyReadingDataD = FALSE;
	}
	/*----- PROTECTED REGION END -----*/	//	Pico11::update
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::on()
{
	DEBUG_STREAM << "Pico11::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::on) ENABLED START -----*/
	
	
	//	Add your own code
	pico->on();
	/*----- PROTECTED REGION END -----*/	//	Pico11::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::off()
{
	DEBUG_STREAM << "Pico11::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::off) ENABLED START -----*/
	
	//	Add your own code
	pico->off();
	/*----- PROTECTED REGION END -----*/	//	Pico11::off
}
//--------------------------------------------------------
/**
 *	Command CollectBlock related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::collect_block()
{
	DEBUG_STREAM << "Pico11::CollectBlock()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::collect_block) ENABLED START -----*/
	pico->CollectBlock();
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::collect_block
}
//--------------------------------------------------------
/**
 *	Command SetTrigParamA related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::set_trig_param_a()
{
	DEBUG_STREAM << "Pico11::SetTrigParamA()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::set_trig_param_a) ENABLED START -----*/
	pico->sourceDetailsA.thresholdUpper = pico->mv_to_adc(threUp, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsA.hysteresisUpper = hystUp;
	pico->sourceDetailsA.thresholdLower = pico->mv_to_adc(threLo, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsA.hysteresisLower = hystLo;
	pico->sourceDetailsA.channel = PS6000_CHANNEL_A;
	if (threMode == 0)
		pico->sourceDetailsA.thresholdMode = PS6000_LEVEL;
	if (threMode == 1)
		pico->sourceDetailsA.thresholdMode = PS6000_WINDOW;
	pico->EnablChan[0] = 1;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::set_trig_param_a
}
//--------------------------------------------------------
/**
 *	Command SetTrigParamB related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::set_trig_param_b()
{
	DEBUG_STREAM << "Pico11::SetTrigParamB()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::set_trig_param_b) ENABLED START -----*/
	pico->sourceDetailsB.thresholdUpper = pico->mv_to_adc(threUp, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsB.hysteresisUpper = hystUp;
	pico->sourceDetailsB.thresholdLower = pico->mv_to_adc(threLo, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsB.hysteresisLower = hystLo;
	pico->sourceDetailsB.channel = PS6000_CHANNEL_A;
	if (threMode == 0)
		pico->sourceDetailsB.thresholdMode = PS6000_LEVEL;
	if (threMode == 1)
		pico->sourceDetailsB.thresholdMode = PS6000_WINDOW;
	pico->EnablChan[1] = 1;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::set_trig_param_b
}
//--------------------------------------------------------
/**
 *	Command SetTrigParamC related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::set_trig_param_c()
{
	DEBUG_STREAM << "Pico11::SetTrigParamC()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::set_trig_param_c) ENABLED START -----*/
	pico->sourceDetailsC.thresholdUpper = pico->mv_to_adc(threUp, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsC.hysteresisUpper = hystUp;
	pico->sourceDetailsC.thresholdLower = pico->mv_to_adc(threLo, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsC.hysteresisLower = hystLo;
	pico->sourceDetailsC.channel = PS6000_CHANNEL_A;
	if (threMode == 0)
		pico->sourceDetailsC.thresholdMode = PS6000_LEVEL;
	if (threMode == 1)
		pico->sourceDetailsC.thresholdMode = PS6000_WINDOW;
	pico->EnablChan[2] = 1;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::set_trig_param_c
}
//--------------------------------------------------------
/**
 *	Command SetTrigParamD related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::set_trig_param_d()
{
	DEBUG_STREAM << "Pico11::SetTrigParamD()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::set_trig_param_d) ENABLED START -----*/
	pico->sourceDetailsD.thresholdUpper = pico->mv_to_adc(threUp, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsD.hysteresisUpper = hystUp;
	pico->sourceDetailsD.thresholdLower = pico->mv_to_adc(threLo, pico->allUnits[CurDev].channelSettings[0].range);
	pico->sourceDetailsD.hysteresisLower = hystLo;
	pico->sourceDetailsD.channel = PS6000_CHANNEL_A;
	if (threMode == 0)
		pico->sourceDetailsD.thresholdMode = PS6000_LEVEL;
	if (threMode == 1)
		pico->sourceDetailsD.thresholdMode = PS6000_WINDOW;
	pico->EnablChan[3] = 1;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::set_trig_param_d
}
//--------------------------------------------------------
/**
 *	Command CollectBlockEts related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Pico11::collect_block_ets()
{
	DEBUG_STREAM << "Pico11::CollectBlockEts()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Pico11::collect_block_ets) ENABLED START -----*/
	pico->CollectBlockEts();
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::collect_block_ets
}
//--------------------------------------------------------
/**
 *	Method      : Pico11::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Pico11::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Pico11::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Pico11::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Pico11::namespace_ending) ENABLED START -----*/

//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Command CollectBlock related method
//  *	Description: 
//  *
//  */
// //--------------------------------------------------------
// void Pico11::collect_block()
// {
// 	DEBUG_STREAM << "Pico11::CollectBlock()  - " << device_name << endl;
// 	
// 	//	Add your own code
// 	chanA.clear();
// 	Pico11::set_defaults();
// 	sampleCount = BUFFER_SIZE;
// 	segmentIndex = 0;
// 	timeInterval = 0.00f;
// 	buffers[0] = (int16_t*)calloc(sampleCount, sizeof(int16_t));
// 	buffers[1] = (int16_t*)calloc(sampleCount, sizeof(int16_t));
// 	status = ps6000SetDataBuffers(unit->handle, PS6000_CHANNEL_A, buffers[0], buffers[1], sampleCount, PS6000_RATIO_MODE_NONE);
// 	while ((status = ps6000GetTimebase2(unit->handle, timebase, sampleCount, &timeInterval, 1, &maxSamples, segmentIndex)) != PICO_OK)
// 	{
// 		timebase++;
// 	}
// 	g_ready2 = NULL;
// 	status = ps6000RunBlock(unit->handle, 0, sampleCount, timebase, 1, &timeIndisposed, segmentIndex, NULL, NULL);
// 	while (g_ready2 == NULL)
// 	{
// 		status = ps6000IsReady(unit->handle, &g_ready2);
// 	}
// 	if (g_ready2 != NULL)
// 	{
// 		status = ps6000GetValues(unit->handle, 0, (uint32_t*)&sampleCount, 1, PS6000_RATIO_MODE_NONE, 0, NULL);
// 		sampleCount = min(sampleCount, BUFFER_SIZE);
// 		for (i = 0; i < sampleCount; i++)
// 		{
// 			//buffers[0][i] = buffers[0][i] * inputRanges[unit->channelSettings[PS6000_CHANNEL_A].range] / PS6000_MAX_VALUE;
// 			chanA.push_back(buffers[0][i]);
// 		}
// 	}
// 	status = ps6000Stop(unit->handle);
// 	for (i = 0; i < unit->channelCount; i++)
// 	{
// 		if (unit->channelSettings[i].enabled)
// 		{
// 			free(buffers[i * 2]);
// 			free(buffers[i * 2 + 1]);
// 		}
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Command Off related method
//  *	Description: 
//  *
//  */
// //--------------------------------------------------------
// void Pico11::off()
// {
// 	DEBUG_STREAM << "Pico11::Off()  - " << device_name << endl;
// 	
// 	//	Add your own code
// 	ps6000CloseUnit(unit->handle);
// 	set_status("Picoscope device is OFF");
// 	set_state(Tango::OFF);
// }

// //--------------------------------------------------------
// /**
//  *	Command On related method
//  *	Description: 
//  *
//  */
// //--------------------------------------------------------
// void Pico11::on()
// {
// 	DEBUG_STREAM << "Pico11::On()  - " << device_name << endl;
// 	
// 	//	Add your own code
// 	status = ps6000OpenUnit(&unit->handle, NULL);
// 	unit->openStatus = status;
// 	unit->complete = 1;
// 	set_status("Picoscope device is ON");
// 	set_state(Tango::ON);
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute DevList related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevString
//  *	Attr type:	Spectrum max = 50
//  */
// //--------------------------------------------------------
// void Pico11::read_DevList(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Pico11::read_DevList(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_DevList_read, 50);
// 	
// }


/*----- PROTECTED REGION END -----*/	//	Pico11::namespace_ending
} //	namespace
