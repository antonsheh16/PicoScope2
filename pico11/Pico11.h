/*----- PROTECTED REGION ID(Pico11.h) ENABLED START -----*/
//=============================================================================
//
// file :        Pico11.h
//
// description : Include file for the Pico11 class
//
// project :     Pico11
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Pico11
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Pico11_H
#define Pico11_H

#include <tango.h>
#include <stdio.h>
#include <deque>
#include <ps6000Api.h>
#include <p6000.h>
 

/*----- PROTECTED REGION END -----*/	//	Pico11.h

/**
 *  Pico11 class description:
 *    Pico11
 */

namespace Pico11_ns
{
/*----- PROTECTED REGION ID(Pico11::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	
/*----- PROTECTED REGION END -----*/	//	Pico11::Additional Class Declarations

class Pico11 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Pico11::Data Members) ENABLED START -----*/
public:


private:
	Tango::DevString strDev;
	std::string stdstrDev;
	p6000 *pico;
	BOOL BusyCopyA;
	BOOL BusyCopyB;
	BOOL BusyCopyC;
	BOOL BusyCopyD;

	vector<double> chanA;
	vector<double> chanB;
	vector<double> chanC;
	vector<double> chanD;
//	Add your own data members
	

/*----- PROTECTED REGION END -----*/	//	Pico11::Data Members


//	Attribute data members
public:
	Tango::DevDouble	*attr_chanAstream_read;
	Tango::DevString	*attr_DevCh_read;
	Tango::DevDouble	*attr_chanA_read;
	Tango::DevDouble	*attr_chanB_read;
	Tango::DevDouble	*attr_chanC_read;
	Tango::DevDouble	*attr_chanD_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pico11(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pico11(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Pico11(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Pico11() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Pico11::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Pico11::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute chanAstream related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_chanAstream(Tango::Attribute &attr);
	virtual bool is_chanAstream_allowed(Tango::AttReqType type);
/**
 *	Attribute DevChoose related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void write_DevChoose(Tango::WAttribute &attr);
	virtual bool is_DevChoose_allowed(Tango::AttReqType type);
/**
 *	Attribute DevCh related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_DevCh(Tango::Attribute &attr);
	virtual bool is_DevCh_allowed(Tango::AttReqType type);
/**
 *	Attribute chanA related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_chanA(Tango::Attribute &attr);
	virtual bool is_chanA_allowed(Tango::AttReqType type);
/**
 *	Attribute chanB related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_chanB(Tango::Attribute &attr);
	virtual bool is_chanB_allowed(Tango::AttReqType type);
/**
 *	Attribute chanC related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_chanC(Tango::Attribute &attr);
	virtual bool is_chanC_allowed(Tango::AttReqType type);
/**
 *	Attribute chanD related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_chanD(Tango::Attribute &attr);
	virtual bool is_chanD_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Pico11::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command SetDefaults related method
	 *	Description: 
	 *
	 */
	virtual void set_defaults();
	virtual bool is_SetDefaults_allowed(const CORBA::Any &any);
	/**
	 *	Command StartStreaming related method
	 *	Description: 
	 *
	 */
	virtual void start_streaming();
	virtual bool is_StartStreaming_allowed(const CORBA::Any &any);
	/**
	 *	Command StopStreaming related method
	 *	Description: 
	 *
	 */
	virtual void stop_streaming();
	virtual bool is_StopStreaming_allowed(const CORBA::Any &any);
	/**
	 *	Command Update related method
	 *	Description: 
	 *
	 */
	virtual void update();
	virtual bool is_Update_allowed(const CORBA::Any &any);
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Pico11::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Pico11::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Pico11::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Pico11::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Pico11::Additional Classes Definitions

}	//	End of namespace

#endif   //	Pico11_H
